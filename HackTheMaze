// wired connections

#define HG7881_B_IA 10 // D10 --> Motor B Input A --> MOTOR B +
#define HG7881_B_IB 9 // D11 --> Motor B Input B --> MOTOR B -

#define HG7881_A_IA 5 //D6 - Motor A input A
#define HG7881_A_IB 6 //D5 - Motor A input B

// functional connections
#define Motor_L_PWM HG7881_B_IA // Motor B PWM Speed
#define Motor_L_DIR HG7881_B_IB // Motor B Direction

#define Motor_R_PWM HG7881_A_IA // Motor A PWM Speed
#define Motor_R_DIR HG7881_A_IB // Motor A Direction

#define DEFAULT_SPEED 175
#define rPower 35


#define SOUND 0.2
#define coll 220 //desired distance from wall

//ultra pins
#define trig 13
#define trigC 3

#define left 12
#define centre 2
#define right 11

//current reading
int cLeft;
int cRight;
int cCentre;






/*
  Sensor Layout
        (3)
    (1)   (2)
    -----------
    |         |
Motor L |   Bot   | Motor R
    |         |
    -----------
*/



void forwardMotorR(int speed){
  speed+=rPower;
  digitalWrite(Motor_R_DIR, HIGH);
  analogWrite(Motor_R_PWM, 255-speed);
}

void reverseMotorR(int speed){
  speed-=rPower;
  digitalWrite(Motor_R_DIR, LOW);
  analogWrite(Motor_R_PWM, speed);
}

void forwardMotorL(int speed){
  digitalWrite(Motor_L_DIR, HIGH);
  analogWrite(Motor_L_PWM, 255-speed);
}

void forward(int speedl, int speedr){
  forwardMotorR(speedr);
  forwardMotorL(speedl);
}

void rev(int speedl, int speedr){
  reverseMotorR(speedl);
  reverseMotorL(speedr);
}

void reverseMotorL(int speed){
  digitalWrite(Motor_L_DIR, LOW);
  analogWrite(Motor_L_PWM, speed);
}

void stopAllMotors(){
  digitalWrite(Motor_R_DIR, LOW);
  digitalWrite(Motor_R_PWM, LOW);
  digitalWrite(Motor_L_DIR, LOW);
  digitalWrite(Motor_L_PWM, LOW);

}

void readUltra ()
{
  digitalWrite(trig, LOW);
  delayMicroseconds(2);
  
  //send wave for 10 ms
  digitalWrite(trig, HIGH);
  delayMicroseconds(10);
  digitalWrite(trig, LOW);
  cLeft= pulseIn(left, HIGH) * SOUND;
  //Serial.print("L");
  //Serial.println(cLeft);
  delayMicroseconds(10);
  
  digitalWrite(trigC, LOW);
  delayMicroseconds(2);
  
  //send wave for 10 ms
  digitalWrite(trigC, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigC, LOW);
  cCentre= pulseIn(centre, HIGH) * SOUND;
  //Serial.print("C");
  //Serial.println(cCentre);
  delayMicroseconds(10);

  digitalWrite(trig, LOW);
  delayMicroseconds(2);
  
  //send wave for 10 ms
  digitalWrite(trig, HIGH);
  delayMicroseconds(10);
  digitalWrite(trig, LOW);
  cRight= pulseIn(right, HIGH) * SOUND;
  //Serial.print("R");
  //Serial.println(cRight);
  delayMicroseconds(10);
 
}

void leg1()
{
  readUltra();
  if(cCentre>230)
  {
    Serial.println("Leg 1");
     while(cCentre>coll)
    {
      //forward(DEFAULT_SPEED,DEFAULT_SPEED);
      readUltra();
    }
    Serial.println("Start the Turn");
  }
}

void rightTurn()
{
    Serial.println("right turn");
    while(cCentre<coll+20)
  {
    //forwardMotorL(DEFAULT_SPEED);
    //reverseMotorR(DEFAULT_SPEED); 
    readUltra();
  }
  Serial.println("Done the Turn");
}
void leftTurn()
{
   Serial.println("left turn");
    while(cCentre<coll+20)
  {
    //forwardMotorR(DEFAULT_SPEED);
    //reverseMotorL(DEFAULT_SPEED); 
    readUltra();
  }
  Serial.println("Done the Turn");
}

void findEnd()
{
  readUltra();
  Serial.println("At End?");
  while(cRight>220 & cLeft>220)
  {
    forward(DEFAULT_SPEED,DEFAULT_SPEED);
  }
  Serial.println("Its the end");
}



void setup() {
  //5,6,9.10 are outputs to the half bridge
  pinMode(Motor_R_DIR, OUTPUT);
  pinMode(Motor_R_PWM, OUTPUT);
  pinMode(Motor_L_DIR, OUTPUT);
  pinMode(Motor_L_PWM, OUTPUT);
//ultra
  pinMode(trig,OUTPUT);
  pinMode(left, INPUT);
  pinMode(right, INPUT);
  pinMode(centre,INPUT);
  Serial.begin(9600);
}

void loop() 
{
  //forward(DEFAULT_SPEED,DEFAULT_SPEED);
  leg1();
  rightTurn();
  leg1();
  rightTurn();
  leg1();
  leftTurn();
  findEnd();
  
  //delay(1);
  //stopAllMotors();
  //stopAllMotors();
  //reverseMotorR(DEFAULT_SPEED);
  //stopAllMotors();
  
  //readUltra();
  //leg1();
 // stopAllMotors();
  //readUltra();
  //turnRight();
 // stopAllMotors();
  //readUltra();
  //leg1();
  //stopAllMotors();
//  readUltra();
//  turnLeft();
//  findEnd();
//  stopAllMotors();
//  stopAllMotors();
//  delay(100);
}
